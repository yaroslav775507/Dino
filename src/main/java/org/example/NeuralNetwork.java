package org.example;

import java.util.Arrays;

public class NeuralNetwork {

    private double[][] dense1;
    private double[] bias1;
    private double[][] dense2;
    private double[] bias2;
    private double[][] dense3;
    private double[] bias3;

    public NeuralNetwork() {
	this.dense1 = new double[][] {
	    { 7.4408e-01, -1.3984e+00,  3.0730e+00, -2.7294e-01,  2.9824e-01, 4.1587e-02},
	    { 8.0831e-02, -4.7823e+00,  1.8955e+00,  2.3672e+00, -2.6499e-01, -6.7457e-01},
	    {-4.1926e-01, -1.3697e+00,  1.5276e+00, -5.0751e-02, -1.1176e+00, -1.1852e+00},
	    {-2.7305e-02,  3.0028e+00,  5.8801e-01, -9.0011e-01,  3.7567e-01, 6.9754e-01},
	    {-1.9780e-01,  2.1611e-01,  2.3601e-01, -9.1877e-02, -2.2541e-01, -3.1776e-01},
	    { 1.2422e+00, -2.4823e+00,  1.3550e-01,  1.0852e+00, -1.4347e-01, -4.8052e-01},
	    {-6.6967e-02,-1.7403e+00,-5.4492e-01,4.0490e-01, -5.0224e-02, -3.9883e-01},
	    { 1.6394e-02, -2.5366e-01,  7.1094e-02,  3.6782e-02,  3.0570e-01, -2.0639e-01},
	    {-4.8009e-01, -3.5727e+00,  5.1287e-01,  1.3601e+00, -1.1796e-01, 6.6688e-01},
	    { 5.7933e-01,  7.2341e+00, -5.6873e-01, -2.2644e-03,  9.0309e-02, 8.8614e-02},
	    {-4.2772e-02,  1.2354e+00, -1.0412e-01, -1.3092e+00,  3.9875e-01, 5.6146e-01},
	    {-1.1484e+00,  3.1760e+00, -2.5121e-01, -1.1671e-01,  4.8573e-01, 1.1177e+00},
	    {-2.2054e-01,  2.9707e+00, -3.7644e-01,  1.1096e-01,  4.6048e-01, 5.2523e-01},
	    { 9.2307e-01, -5.0349e-01,  4.2873e-01,  7.6117e-01, -6.1329e-01, -1.2029e+00},
	    {-2.0404e+00, -4.3897e+00, -3.7728e-02,  2.9074e+00,  2.6733e-01, 3.7996e-01},
	    {-1.7193e-01, -1.3628e-01,  5.0616e-01,  1.7630e-01, -1.5325e-01, -2.5032e-01},
	    {-1.0857e+00, -4.5135e+00, -6.4446e-01,  6.9061e-01,  1.2892e-01, 1.4674e-01},
	    {-4.1323e-01, -1.0617e+00,  3.6228e+00,  3.3082e-02, -6.2196e-02, -8.9886e-02},
	    {-2.7648e-01,  5.2294e+00, -2.8592e-01, -2.4367e-01,  9.1699e-02, -3.4438e-01},
	    { 2.3771e-02, -3.5938e-01,  8.0260e-01,  1.0571e+00,  1.8915e-01, 1.2469e+00},
	    { 4.9246e-01, -5.1308e-01, -9.5084e-01, -1.2030e+00,  2.6384e-01, 5.4279e-01},
	    {-7.4828e-02, -1.6373e+00,  2.3766e+00,  1.1395e+00, -1.0004e-01, -1.1067e-02},
	    {-9.4680e-01, -1.6325e+00, -8.4167e-02,  3.6660e-01,  6.3374e-01, 9.3177e-01},
	    { 8.9273e-02, -1.1033e+00,  2.9647e+00,  1.2006e+00,  3.8638e-02, -7.6467e-02},
	    {-2.3985e-01, -3.9298e+00,  4.4473e-01,  1.4668e+00,  4.6795e-01, 7.9461e-01},
	    { 4.8681e-01, -4.1948e+00, -1.0934e-01,  8.0548e-01, -4.7740e-02, 1.1829e-01},
	    { 6.9399e-01,  1.4220e+00, -3.6009e-01, -1.6414e+00,  2.9700e-01, 9.9259e-01},
	    { 2.2264e-01, -7.0062e-02,  9.7566e-02,  3.0045e-01,  3.8172e-01, 3.1665e-01},
	    {-5.1921e-01,  4.5759e+00,  2.2017e-01, -9.7080e-01,  1.7044e-03, 5.2705e-02},
	    {-3.1762e-02, -3.7102e+00, -3.7345e-01,  1.5338e+00, -1.5579e-01, 1.0144e-01},
	    { 2.9348e-01,  3.2950e+00,  8.4471e-01, -1.1208e+00,  3.3462e-01, 7.2175e-02},
	    {-1.2656e+00, -4.9942e-02, -7.0072e-01, -2.8266e-01,  3.4126e-01, 3.4183e-01}
	};
	this.bias1 = new double[] {-0.0780,  0.0679, -1.2288,  0.4202, -0.3900, -0.2827, -0.0869, -0.3371, 0.1223,  0.0935,  0.3646,  0.3930,  0.3894, -0.4279,  0.4923, -0.4637, 0.4104, -0.2052, -0.0283,  1.1027,  0.9982, -0.1218,  1.0316,  0.1969, 0.7304,  0.2571,  0.2429, -0.2710, -0.2690,  0.1835,  0.7113,  0.6036};
	this.dense2 = new double[][] {
	    { 1.3405e-01, -8.7278e-01,  3.8602e-01,  1.1891e-01, -2.2268e-02, 1.0098e-02,  5.4960e-02, -7.7097e-02, -4.7001e-01,  2.2505e+00, -6.1691e-02,  3.2605e-02,  1.0257e-01, -1.7443e-01, -2.2356e-01, -1.5746e-01, -5.5912e+00, -1.1996e+00,  1.2243e+00,  1.0820e-01, -9.6350e-02, -3.8894e-01, -6.9311e-03,  6.9231e-01, -8.6383e-02, -1.4478e+00,  7.5656e-02, -1.1528e-01, -7.5116e-01, -1.4117e+00, -1.2195e-02, -8.1654e-01},
	    { 1.3847e-01,  6.8829e-01,  5.7740e-01,  3.0574e-02,  9.2677e-02, -3.9571e-01, -4.2283e-01, -2.4166e-02, -6.5918e-01,  5.2713e-01, -1.7406e-01,  2.1505e-01, -6.7238e-01, -3.4395e-02,  4.0551e-01, 4.5597e-01,  3.6763e-01,  1.8426e-01, -1.0977e+00,  2.3534e-01, 2.6760e-01,  2.9651e-01,  1.0933e-01,  1.5700e-01,  1.9369e-01, 4.0301e-01,  7.7815e-02, -5.5288e-02, -8.0665e-01, -1.2735e-01, -9.6606e-02,  2.6422e-01},
	    {-2.3632e-01, -1.2859e+00, -8.4314e-01, -1.8159e+00, -1.2109e-01, 8.1006e-01,  9.2003e-01,  1.1853e-01,  2.9883e+00,  8.2705e-02, -7.7942e-02,  1.0715e-01, -7.8535e-02,  8.8672e-01, -1.1905e-01, -4.3715e-01,  2.5329e-01, -7.2038e+00,  2.2655e-01, -1.6428e-02, 1.3186e-01, -4.1131e+00, -9.4629e-02, -1.4128e-01,  2.9209e-01, 2.8690e-01, -5.5489e-02,  2.5544e-02,  1.1544e-02,  8.1028e-01, 1.3214e+00,  3.5457e-01},
	    {-1.9263e-03, -4.9551e-02, -1.0086e-01, -1.3925e-01, -1.9252e-02, 6.6667e-02,  2.3083e-02,  8.3096e-02, -8.3082e-04,  1.2140e-01, -8.8325e-02,  1.9176e-02, -8.2406e-02,  1.2773e-01, -1.1031e-01, 6.4158e-02,  1.6609e-01, -1.5672e-01, -5.6800e-03, -2.6296e-02, -1.1831e-01, -1.4863e-01, -7.6452e-03,  7.7525e-02, -1.6580e-01, 8.6270e-02,  1.3840e-01, -1.4470e-01,  3.6906e-02, -1.2295e-01, 1.1890e-01, -1.5885e-01},
	    { 1.7144e-01, -1.3562e-02,  2.1863e-01,  2.8969e-01, -1.0784e-02, -1.4160e+00, -3.5139e-02, -5.3195e-02, -2.1509e-01, -2.2427e-01, 5.6124e-01, -8.1421e-01,  1.3981e+00,  8.7542e-01, -3.0000e-01, -3.6455e-01, -1.4281e+00,  7.6465e-02,  3.6601e+00, -1.4249e-01, -1.9140e+00,  5.1881e-02, -7.4222e-04, -1.0007e-01, -3.8087e-01, -3.7448e+00, -1.1947e+00,  8.1822e-03,  1.6397e-01, -5.9827e-01, 2.3770e-01, -1.7728e-01},
	    {-2.1748e-02, -1.2644e-01, -2.1241e-02,  2.8181e-01, -1.4294e-01, 1.2180e+00, -3.0982e-01,  1.4481e-01, -7.1585e-02, -7.1873e-01, 3.8112e-01, -4.3646e+00,  6.7931e+00,  9.8033e-01, -1.5647e-01, -2.8002e-01, -1.6897e+00,  1.1963e-02,  6.9874e+00,  1.1574e-01, -7.5386e-01, -1.6455e-01,  1.7387e-01, -9.0246e-02, -1.0212e-01, -3.0706e-01, -8.7556e-01, -2.1753e-03, -3.9673e-01, -1.1382e+00, -1.2650e-02, -1.3443e+00},
	    {-4.2754e-01,  1.6471e-02, -3.6591e+00, -4.1969e-01, -3.1992e-02, 3.6114e+00,  6.3644e-01,  1.1274e-04,  5.1010e-01,  1.7312e-01, 1.2418e-01, -2.4272e-01,  5.0062e-02,  1.3705e+00,  3.5882e-01, 2.9570e-02,  7.2175e-02,  1.9694e-01,  5.6423e-01, -3.2912e-02, 3.5045e-02,  1.0112e-01,  2.0879e-01, -2.4739e-01,  1.4369e-01, 2.6986e-01,  1.0057e-01, -7.1569e-02, -4.3271e-02,  1.9602e-01, 1.3582e-01,  1.2410e-01},
	    { 4.3388e-02,  3.3292e-01, -5.1259e+00, -2.9219e-01, -4.2581e-02, -2.1905e+00,  6.2801e-01,  1.6954e-02,  1.1046e+00, -9.8342e-02, 6.1031e-02, -3.0476e-01,  2.5991e-01,  7.7930e-01, -4.5443e-01, -4.0102e-01, -2.0477e-01, -1.7608e-01,  9.5217e-01, -2.1270e-01, 6.9652e-02, -1.2543e-01, -2.3694e-01,  1.0812e-01,  1.6702e-02, 2.0645e-01, -3.5227e-01, -9.9141e-02,  1.1859e-01,  5.3216e-01, 2.6372e-01,  3.7936e-02},
	    { 3.8377e-01,  5.9769e-01,  3.2557e-01,  1.9301e-02, -4.6936e-02, 3.2534e-01, -5.4266e-01, -8.6865e-02, -1.4035e-01,  1.4090e-01, -4.0547e-01,  2.1183e-01, -6.6804e-01, -1.6479e-01,  3.1047e-01, 3.6686e-01,  6.0900e-01,  4.5472e-01, -1.2501e+00,  3.3110e-01, 1.9833e-01,  5.0792e-01,  1.8966e-01,  4.0476e-01,  1.3133e-01, 4.0734e-01,  1.1397e-01,  6.6855e-02, -1.5421e+00,  8.7225e-02, -1.7195e-01,  1.2505e-01},
	    {-2.7450e-02, -8.2083e-01,  9.7749e-01, -1.2546e-01,  1.6091e-01, 2.7418e-01, -6.5610e-01,  3.8392e-03, -3.8375e-02,  4.0321e-01, -3.5016e-01,  1.3731e+00,  3.8401e-02, -4.1902e-01, -6.4810e-01, 1.9514e-01, -3.9057e+00,  3.7312e-01, -2.1477e+00,  2.0980e-02, -2.1350e-01,  3.5375e-01, -2.9806e-01,  8.2276e-02, -5.7259e-02, -9.2046e-01, -3.8183e-01,  1.3768e-01, -5.1787e+00, -1.4618e+00, -1.8806e-01,  1.3466e+00},
	    { 3.8397e-01,  4.0373e-01,  3.8505e-01,  1.2075e-01,  3.9099e-02, -7.7625e-02, -4.0339e-01, -1.0605e-01,  1.0896e-01,  2.1857e-01, -2.4794e-01,  6.9113e-03, -6.5036e-01,  8.9046e-02,  1.3468e-01, 4.0047e-01,  4.5957e-01,  3.1643e-01, -1.0540e+00,  3.1640e-01, 1.9311e-01,  2.8740e-01,  2.5331e-01,  1.7726e-01,  3.7565e-01, 1.2453e-01,  2.0210e-01,  5.4352e-02, -1.1743e+00,  1.5235e-01, -1.8712e-02,  6.2087e-02},
	    { 4.9058e-02, -3.7089e-01, -5.6216e+00, -8.3274e-01,  8.1084e-02, -4.6265e+00,  7.2312e-01,  1.3718e-01,  4.5942e-01, -2.1110e-01, -1.0070e-01, -3.0548e-01, -3.7926e-01,  6.8856e-01,  3.5660e-01, 2.6007e-02,  2.2790e-01, -4.4800e-02, -1.5191e-01,  2.4086e-01, 1.0966e-01, -3.3705e-01,  2.2643e-01, -2.1167e-02,  5.8170e-01, 2.6858e-01, -2.5926e-01, -1.5080e-01, -2.2329e-01,  4.0838e-01, 7.0225e-01,  3.0921e-02},
	    {-7.4244e-02, -5.7026e-02, -2.9975e+00, -3.9824e-01, -4.0073e-02, 4.0932e+00,  4.5631e-01, -6.7618e-02,  8.3259e-01, -4.4053e-01, 2.5070e-01, -1.5835e-01, -1.1433e-01,  2.5374e+00,  4.8669e-02, -5.7194e-01, -1.5996e-01,  1.3633e-01,  7.2360e-01,  8.8693e-02, 2.0509e-01,  3.6351e-02,  1.3698e-01, -2.3005e-01,  1.9763e-01, 2.8987e-01,  1.7971e-02, -1.1997e-01, -5.5043e-01,  3.3206e-01, 1.4457e-01, -2.3045e-02},
	    { 2.5180e-01,  2.0525e-01,  1.0871e+00, -4.2573e-01, -1.0573e-01, -6.6778e-01, -1.0813e-01,  7.6518e-02, -1.1659e+00, -1.2491e+00, -6.4282e-01,  2.8167e-01, -3.8753e-01, -1.4981e+00, -1.1754e-01, -1.9468e+00, -2.2131e-01,  2.9970e-01, -4.0965e+00, -7.5045e-02, -7.5139e-01,  3.3532e-01, -3.9304e-01,  1.7597e-01, -3.0285e-01, -4.1292e-01, -1.7286e-01,  1.4794e-01, -7.4092e-01, -2.2871e+00, -1.7282e-01, -1.1987e+00},
	    { 4.7263e-01,  6.9080e-01,  7.0225e-01, -6.1141e-01, -1.4416e-01, -1.2109e+00, -1.9328e-01, -8.6233e-02, -1.8538e-01,  5.8724e-01, -5.0460e-01, -3.2822e-01, -7.6702e-01, -7.0693e-01, -9.1913e-02, 3.6606e-01,  5.7865e-01,  7.0025e-01, -1.2511e+00,  3.1111e-02, 1.9855e-01,  6.1998e-01, -1.1878e-01,  3.7802e-01, -2.5030e-01, 3.0603e-01,  7.8732e-02,  1.3328e-02, -5.1071e-01,  1.6444e-01, -3.7822e-01,  3.2519e-01},
	    { 1.9055e-01,  5.1215e-02,  9.8968e-01, -3.6805e-01,  2.6293e-02, -4.0926e-01, -8.9238e-01,  1.5946e-01, -4.5691e-01, -8.4729e-02, -8.3348e-01, -8.2352e-01, -1.9216e+00, -6.8291e-01,  2.9977e-02, 1.6061e-01,  2.1789e-01,  1.8585e-01, -1.0290e+00, -1.5925e-03, -1.6037e-01,  3.8829e-01, -2.2542e-01, -2.7288e-02, -1.5871e-01, 4.4995e-02, -3.4935e-01, -1.4682e-04, -4.6934e-01, -1.8656e-01, -2.8978e-01, -1.5948e+00},
	    { 2.2185e-01,  7.3419e-01,  4.9272e-01,  7.2827e-02, -1.2384e-01, -1.2227e+00, -4.8606e-01,  1.2754e-01, -5.2482e-01,  5.2510e-01, -7.8608e-02,  1.4360e-01, -7.3680e-01, -9.8319e-01,  2.6569e-01, 5.0950e-01,  5.5321e-01,  6.4515e-02, -9.3980e-01,  1.5957e-01, 2.1418e-01,  3.3725e-01,  1.9533e-01,  1.9293e-01,  3.2608e-01, 3.6873e-01,  3.2564e-01,  2.7969e-02, -4.2665e-01, -1.4930e-01, -1.3247e-02,  2.5092e-01},
	    { 8.6333e-03, -1.4140e-01, -6.8357e-02, -5.6700e-02, -5.0621e-02, -7.6023e-02,  5.8060e-02,  1.7196e-02,  7.6554e-03, -3.3276e-02, 3.4028e-02,  1.5287e-01, -1.7646e-01, -8.8191e-02,  1.1211e-01, -9.9496e-02, -4.7169e-02,  1.1829e-01, -5.3835e-02, -8.7819e-02, -8.8360e-02,  1.2035e-01, -5.7072e-02, -1.8629e-02, -5.8784e-02, 1.6755e-01, -1.5356e-01, -1.7471e-01,  1.2367e-01,  1.3739e-01, -1.6722e-01,  1.3350e-01},
	    { 3.0266e-01, -2.1632e-01, -2.2318e+00, -3.8440e-02,  8.1282e-02, -4.4736e+00,  8.4301e-01, -7.8795e-02, -3.6254e-01,  1.1853e-01, 3.7751e-01,  3.3734e-01,  1.6257e-01, -2.9222e+00,  1.9375e-01, -1.0596e-01, -4.2108e-01, -1.6427e-01,  1.2094e+00,  9.6114e-02, -4.0385e-02, -3.9767e-01,  1.8076e-01, -8.0620e-02,  2.6250e-03, -8.7063e-02,  3.1421e-01,  2.1364e-02,  4.0952e+00, -1.3090e-02, 6.1887e-01,  4.2935e-01},
	    { 6.4398e-02, -1.4595e-01,  6.2407e-02, -6.8676e-02,  1.2095e-01, -5.2635e-02, -1.6853e-01, -9.7442e-02, -4.4738e-02,  1.1988e-01, 6.7844e-02, -2.2868e-02, -1.5950e-01, -1.1319e-01, -1.4025e-01, 2.1345e-02,  7.4169e-02,  5.8872e-02,  4.6610e-02, -1.3269e-01, -1.6506e-01, -1.7390e-01,  1.3854e-01, -8.7856e-02, -6.5504e-03, -8.4600e-02, -1.1820e-01, -6.0425e-02, -1.2583e-01, -1.7132e-01, -1.6248e-01,  1.4884e-01},
	    { 5.5539e-01,  2.4480e-01,  7.1751e-01,  5.3269e-01, -1.6397e-01, 1.4269e+00, -4.4249e-02, -1.7001e-01, -1.2279e-01, -3.0666e+00, 1.0585e-01, -1.4272e+00,  1.5748e+00,  1.3298e-01,  3.2440e-01, -1.8776e-01, -8.9092e-01,  6.4738e-01,  7.0638e+00,  6.5936e-01, -1.8110e+00,  6.3705e-01,  4.6973e-01,  7.8677e-01,  5.6039e-01, -1.6113e+00, -5.5439e-01, -1.6448e-01,  4.8698e-01, -1.9713e-01, 6.3304e-01, -5.7026e-01},
	    {-3.0153e+00,  4.6729e-01, -1.7748e+00, -8.8794e-01, -1.1965e-01, 5.3290e+00, -3.7701e-01, -1.4416e-01,  1.9737e+00,  2.6270e-02, -3.9383e-01, -1.1589e-01,  1.3822e-01, -4.1918e+00,  1.4613e+00, -1.0919e-01,  1.0839e-01, -1.4147e+00, -8.7284e-02,  2.0666e-01, 2.3627e-01, -2.8767e-01,  1.8495e-01,  1.0582e-01, -7.6203e-01, 3.0783e-01,  1.7135e-01,  3.9718e-03, -1.4957e+00,  2.5858e-01, -8.8913e-01,  1.8899e-02},
	    { 2.5217e-01,  1.8447e-01, -4.9704e+00, -4.8950e-01, -1.7235e-01, 4.4742e+00,  4.8334e-01, -3.3105e-02,  1.4507e+00, -2.6853e-01, -6.0178e-02, -2.0711e-01,  1.1353e-02,  3.6529e-02,  2.2637e-01, -9.1132e-02,  3.9051e-02,  7.9665e-01,  3.9972e-01,  8.2358e-02, 1.0847e-01,  8.4846e-01,  2.3773e-01,  4.5023e-01,  1.2160e-01, -8.5564e-02,  2.4630e-02, -5.0387e-02, -1.4905e+00,  1.9160e-01, 1.3599e-01, -5.8724e-02},
	    {-6.9473e-01, -6.6796e-01, -1.9209e+00,  3.7190e-01, -7.6054e-02, -2.2286e+00, -2.5741e+00,  9.5359e-02,  2.2828e+00,  2.0057e-01, 2.0690e-01, -5.7166e-02,  8.4441e-01, -1.1939e-01, -9.0228e-01, -5.6658e-01, -1.2005e+00,  5.6707e-01,  2.9292e-01, -2.7505e-02, -1.7982e-01, -2.2681e-01, -9.4390e-02, -6.7579e-01, -3.2213e-01, -6.9265e-01, -2.7936e-01, -5.4535e-03,  6.8123e+00,  2.1676e+00, 3.7281e-01,  2.5682e-01},
	    { 3.5909e-01,  6.4419e-01,  3.7967e-01,  1.2980e-01,  1.6893e-01, -1.3461e-01, -3.7041e-01,  4.1423e-02, -1.9685e-01,  3.4945e-01, -1.7382e-01,  2.0211e-01, -8.0103e-01, -5.6030e-02,  1.9265e-01, 4.0457e-01,  6.2525e-01,  4.0695e-01, -1.0848e+00,  3.3959e-01, 1.9418e-01,  4.6540e-01,  1.7558e-01,  2.4451e-01,  1.7566e-01, 1.5313e-01,  2.5665e-01, -1.3262e-01, -1.3199e+00,  1.1654e-01, -2.4125e-01,  6.8909e-02},
	    { 1.8950e-01, -3.1764e-02,  1.3573e-01, -1.1020e-01,  1.0152e-01, 2.4848e-01, -9.0065e-02,  3.4589e-02, -2.3616e-01, -2.7860e-02, -2.0594e-01,  1.7549e-01,  1.2752e-01,  2.5568e-01, -2.6689e-01, 4.2669e-01, -2.2595e-01, -1.1431e-01, -1.0626e-01,  2.9687e-02, -7.4512e-02,  9.9936e-02, -2.2236e-01, -9.5237e-02, -1.9609e-01, 9.9476e-02, -8.8451e-01,  1.2108e-01,  9.8865e-02, -2.8608e-01, -5.9304e-02, -2.3882e-01},
	    { 1.8952e-01,  5.6657e-01,  8.5853e-01, -3.9253e-02, -4.1519e-02, -3.1520e+00, -9.0626e-01,  2.4977e-02, -1.1617e-01,  1.5747e+00, -5.1660e-01,  1.3880e-01, -3.1997e-01, -1.9983e+00,  7.0269e-01, 5.4170e-01,  1.2202e-01,  4.0470e-01, -1.1214e+00, -3.7870e-02, -7.9062e-01,  4.0863e-01, -1.6908e-01,  1.6786e-01,  4.0873e-01, 4.2251e-03, -1.1558e+00, -5.3650e-02, -1.2734e+00, -1.3538e+00, -5.5558e-02,  5.5714e-01},
	    {-1.2655e-02,  8.5199e-01, -2.0104e+00,  2.1352e-01, -1.4980e-02, 3.2585e+00, -6.1140e-01, -1.2450e-01, -4.4907e-01,  8.0523e-01, 2.2501e-01, -4.0799e-01,  1.9276e-01, -1.1050e+00,  1.4169e-01, -8.9393e-02,  1.7303e-01,  3.0052e-01,  2.2389e-01,  2.8662e-01, 2.4058e-01,  2.2800e-01,  1.5942e-01,  1.3786e-01,  3.8029e-01, 4.9767e-02,  3.6319e-01, -3.7648e-02, -2.4589e+00,  3.0715e-03, 3.7257e-01, -9.3094e-02},
	    { 2.3579e-01,  7.9281e-01, -5.6154e+00,  3.4902e-01, -3.9271e-02, -1.0479e-01,  4.0930e-01, -8.6630e-02,  1.1133e+00,  5.5036e-01, 8.4798e-01,  7.8518e-01,  3.7977e-01, -5.8663e+00,  1.1854e+00, 8.4640e-03,  8.6671e-01, -8.0586e-02,  4.8602e-02,  1.1393e+00, 5.7656e-01, -1.5807e-01,  9.3094e-01,  3.9099e-01,  9.7644e-01, 9.8382e-01,  6.4617e-01, -3.9729e-02,  5.2359e+00,  8.0137e-01, 6.9803e-01,  5.9668e-01},
	    { 1.2030e-01,  2.6921e-01,  3.0294e-01, -1.9250e-02,  1.7068e-01, 9.9454e-01,  1.7263e-01,  1.6975e-01,  4.8627e-01, -9.1721e-01, 5.3949e-02, -3.0037e+00,  2.8908e+00,  8.2266e-01,  5.8646e-01, -3.7113e-01, -1.3701e+00,  2.8078e-01,  4.8273e+00,  1.3186e-01, -5.5151e-01,  2.6011e-01,  6.9591e-02,  1.3494e-01,  1.1690e-01, -1.1159e+00, -4.1816e-01, -1.2861e-01, -2.4820e+00, -8.4677e-01, -5.7595e-02, -1.7080e+00},
	    {-3.0674e-02,  5.5313e-02, -1.6300e-01, -1.8984e-01, -2.3449e-02, -1.8530e-01, -1.3246e-01,  8.9766e-02, -3.2774e-02, -6.9823e-02, 8.7138e-02, -1.6577e-01,  5.6880e-02, -1.3943e-01,  6.2331e-04, 1.5241e-01, -4.4042e-02,  1.4061e-01,  1.4881e-02, -1.5947e-01, -2.1678e-02,  3.0567e-02,  9.8327e-03,  1.2324e-01, -1.0822e-01, -1.2868e-01,  2.8275e-02, -1.6903e-01, -1.3687e-01, -1.0842e-01, -1.3313e-01,  7.6426e-02},
	    { 4.7888e-01,  1.8270e-01,  9.3099e-01, -3.1539e-01,  1.6468e-01, -3.0024e-01, -9.4381e-02,  1.6520e-01, -6.7709e-01, -1.9706e+00, -4.8258e-01, -1.0645e+00, -2.9231e+00,  8.2352e-01, -5.2939e-01, -8.9782e-02, -8.0100e-01,  1.5137e-01, -4.3287e+00, -2.2266e-01, -2.0249e+00,  4.5673e-01, -7.0186e-01,  2.5517e-01, -1.0049e-01, -4.4079e-01, -1.4513e+00, -2.7283e-02, -4.2893e-01, -1.7448e+00, -2.0743e-01, -6.2856e-01}
	};
	this.bias2 = new double[] {-3.3994e-02,  2.8151e-02, -2.2356e-01, -1.1119e-01,  1.3706e-01, 1.9680e-01,  2.1431e-01,  1.1413e-01,  1.8353e-01, -1.2659e-01, 1.2394e-01, -4.1807e-02, -7.2866e-02, -4.6398e-01, -1.9940e-01, -2.3865e-01, -2.4625e-02, -1.9180e-03,  1.7656e-01, -7.5577e-02, 2.9065e-01, -3.7467e-02,  1.3522e-01,  2.6998e-01,  1.7550e-04, -3.1232e-01, -5.1271e-02,  2.0238e-01,  9.7382e-01, -4.1364e-02, -2.2848e-02, -3.7646e-01};
	this.dense3 = new double[][] {
	    { 4.9915, -0.4250,  0.6720,  0.0813,  1.5243,  2.0208,  1.0875,  4.2173, -0.5157, -5.7106, -0.5928,  4.2441,  1.6378, -1.3601, -0.5745, -0.7571, -0.4238,  0.0491,  0.8754,  0.0964,  1.7402,  0.4824,  1.0458, 10.1079, -0.6457, -0.2537, -0.8267, -0.0430, -0.9393, -0.2909,  0.1017, -1.1961},
	    { 5.0245, -0.4136,  3.9306, -0.0324,  0.1769,  0.3158,  0.0797,  2.0310, -0.1533, -6.0217, -0.1841,  3.1036,  0.9354, -1.6828, -0.8895, -1.0483, -0.4577, -0.0637,  0.2168,  0.0474,  1.3748, -3.2954,  0.7744,  9.6002, -0.2849, -0.6002, -1.4655, -1.2463, -0.4318,  1.6650, -0.1590, -1.0044}
	};
	this.bias3 = new double[] {-0.2926,  0.1783};
    }

    public int selectAction(double dinoY, double dinoDY, double obstacleDistX, double obstacleDistY, double obstacleWidth, double obstacleHeight) {
	double[] input = { dinoY, dinoDY, obstacleDistX, obstacleDistY, obstacleWidth, obstacleHeight };
	double[] output = this.forward(input);
	int action = 0;
	for (int i = 1; i < output.length; i++) {
	    if (output[i] > output[action]) {
		action = i;
	    }
	}
	return action;
    }

    private double[] forward(double[] x) {
	double[] x1 = ReLU(plus(matMul(this.dense1, x), this.bias1));
	double[] x2 = ReLU(plus(matMul(this.dense2, x1), this.bias2));
	double[] x3 = plus(matMul(this.dense3, x2), this.bias3);
	return x3;
    }

    private static double[] matMul(double[][] w, double[] x) {
	int n = w.length;
	int m = w[0].length;

	double[] y = new double[n];
	for (int i = 0; i < n; i++) {
	    y[i] = 0.0;
	    for (int j = 0; j < m; j++) {
		y[i] += w[i][j] * x[j];
	    }
	}
	return y;
    }

    private static double[] plus(double[] b, double[] x) {
	double[] y = new double[b.length];
	for (int i = 0; i < b.length; i++) {
	    y[i] = b[i] + x[i];
	}
	return y;
    }

    private static double[] ReLU(double[] x) {
	double[] y = new double[x.length];
	for (int i = 0; i < x.length; i++) {
	    if (x[i] >= 0.0) {
		y[i] = x[i];
	    } else {
		y[i] = 0.0;
	    }
	}
	return y;
    }

    public static void main(String[] args) {
	NeuralNetwork nn = new NeuralNetwork();
	System.out.println("Selected action: " + nn.selectAction(0.0, 0.0, 0.39575, 0.0, 0.06944368, 0.16059652));
	System.out.println("Selected action: " + nn.selectAction(0.0, 0.0, 0.227, 0.0, 0.06944368, 0.16059652));
    }

};
